{"ast":null,"code":"import _taggedTemplateLiteral from\"C:\\\\Users\\\\HP\\\\Dev\\\\react\\\\ticgame\\\\rdgcovidquiz\\\\RDGcovidquiz\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"C:\\\\Users\\\\HP\\\\Dev\\\\react\\\\ticgame\\\\rdgcovidquiz\\\\RDGcovidquiz\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  query {\\n    questionsList {\\n      items {\\n        question\\n        options\\n        answer\\n        image {\\n          downloadUrl\\n        }\\n      }\\n    }\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState}from'react';import gql from'graphql-tag';import{graphql}from'react-apollo';import Question from'../question';import'./questions.css';var Questions=function Questions(_ref){var questions=_ref.questions;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),currentIndex=_useState2[0],setCurrentIndex=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),score=_useState4[0],setScore=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),showFinished=_useState6[0],setShowFinished=_useState6[1];var currentQuestion=questions[currentIndex];var onNextClicked=function onNextClicked(selectedOption){if(currentQuestion.answer===selectedOption)setScore(score+1);if(currentIndex+1>questions.length-1){setShowFinished(true);return;}setCurrentIndex(currentIndex+1);};var resetQuiz=function resetQuiz(){setCurrentIndex(0);setShowFinished(false);setScore(0);};return questions.length?/*#__PURE__*/React.createElement(\"div\",null,showFinished?/*#__PURE__*/React.createElement(\"div\",{className:\"results\"},/*#__PURE__*/React.createElement(\"img\",{src:\"https://memegenerator.net/img/instances/84966056/your-quiz-has-ended-well-done.jpg\",alt:\"Your Quiz has ended\"}),/*#__PURE__*/React.createElement(\"h3\",null,\"Your covid 19 quiz results are out! You scored \",score,\" out of \",questions.length,\". Kudos and continue keeping  safe!!!\")):/*#__PURE__*/React.createElement(Question,{onNextClicked:onNextClicked,question:currentQuestion,key:currentQuestion.id}),showFinished?/*#__PURE__*/React.createElement(\"button\",{className:\"try-again\",onClick:resetQuiz},\"Try again\"):/*#__PURE__*/React.createElement(\"div\",{className:\"questions-progress\"},currentIndex+1,\"/\",questions.length)):/*#__PURE__*/React.createElement(\"p\",null,\"Loading\");};var GET_QUESTIONS_QUERY=gql(_templateObject());export default graphql(GET_QUESTIONS_QUERY,{props:function props(result){var loading=result.loading,data=result.data;var items=[];if(data&&data.questionsList)items=data.questionsList.items;return{loading:loading,questions:items};}})(Questions);","map":{"version":3,"sources":["C:/Users/HP/Dev/react/ticgame/rdgcovidquiz/RDGcovidquiz/src/components/questions/index.js"],"names":["React","useState","gql","graphql","Question","Questions","questions","currentIndex","setCurrentIndex","score","setScore","showFinished","setShowFinished","currentQuestion","onNextClicked","selectedOption","answer","length","resetQuiz","id","GET_QUESTIONS_QUERY","props","result","loading","data","items","questionsList"],"mappings":"urBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,GAAP,KAAgB,aAAhB,CACA,OAASC,OAAT,KAAwB,cAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CAEA,MAAO,iBAAP,CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAmB,IAAhBC,CAAAA,SAAgB,MAAhBA,SAAgB,eACKL,QAAQ,CAAC,CAAD,CADb,wCAC5BM,YAD4B,eACdC,eADc,8BAETP,QAAQ,CAAC,CAAD,CAFC,yCAE5BQ,KAF4B,eAErBC,QAFqB,8BAGKT,QAAQ,CAAC,KAAD,CAHb,yCAG5BU,YAH4B,eAGdC,eAHc,eAKnC,GAAMC,CAAAA,eAAe,CAAGP,SAAS,CAACC,YAAD,CAAjC,CAEA,GAAMO,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,cAAD,CAAoB,CACxC,GAAIF,eAAe,CAACG,MAAhB,GAA2BD,cAA/B,CAA+CL,QAAQ,CAACD,KAAK,CAAG,CAAT,CAAR,CAC/C,GAAIF,YAAY,CAAG,CAAf,CAAmBD,SAAS,CAACW,MAAV,CAAmB,CAA1C,CAA6C,CAC3CL,eAAe,CAAC,IAAD,CAAf,CACA,OACD,CACDJ,eAAe,CAACD,YAAY,CAAG,CAAhB,CAAf,CACD,CAPD,CASA,GAAMW,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtBV,eAAe,CAAC,CAAD,CAAf,CACAI,eAAe,CAAC,KAAD,CAAf,CACAF,QAAQ,CAAC,CAAD,CAAR,CACD,CAJD,CAMA,MAAOJ,CAAAA,SAAS,CAACW,MAAV,cACL,+BACGN,YAAY,cACX,2BAAK,SAAS,CAAC,SAAf,eACE,2BACE,GAAG,CAAC,oFADN,CAEE,GAAG,CAAC,qBAFN,EADF,cAKE,gFACkDF,KADlD,YACiEH,SAAS,CAACW,MAD3E,yCALF,CADW,cAWX,oBAAC,QAAD,EACE,aAAa,CAAEH,aADjB,CAEE,QAAQ,CAAED,eAFZ,CAGE,GAAG,CAAEA,eAAe,CAACM,EAHvB,EAZJ,CAkBGR,YAAY,cACX,8BAAQ,SAAS,CAAC,WAAlB,CAA8B,OAAO,CAAEO,SAAvC,cADW,cAKX,2BAAK,SAAS,CAAC,oBAAf,EACGX,YAAY,CAAG,CADlB,KACsBD,SAAS,CAACW,MADhC,CAvBJ,CADK,cA8BL,uCA9BF,CAgCD,CAtDD,CAwDA,GAAMG,CAAAA,mBAAmB,CAAGlB,GAAH,mBAAzB,CAeA,cAAeC,CAAAA,OAAO,CAACiB,mBAAD,CAAsB,CAC1CC,KAAK,CAAE,eAACC,MAAD,CAAY,IACTC,CAAAA,OADS,CACSD,MADT,CACTC,OADS,CACAC,IADA,CACSF,MADT,CACAE,IADA,CAEjB,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CACA,GAAID,IAAI,EAAIA,IAAI,CAACE,aAAjB,CAAgCD,KAAK,CAAGD,IAAI,CAACE,aAAL,CAAmBD,KAA3B,CAChC,MAAO,CACLF,OAAO,CAAPA,OADK,CAELjB,SAAS,CAAEmB,KAFN,CAAP,CAID,CATyC,CAAtB,CAAP,CAUZpB,SAVY,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { graphql } from 'react-apollo';\r\nimport Question from '../question';\r\n\r\nimport './questions.css';\r\n\r\nconst Questions = ({ questions }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showFinished, setShowFinished] = useState(false);\r\n\r\n  const currentQuestion = questions[currentIndex];\r\n\r\n  const onNextClicked = (selectedOption) => {\r\n    if (currentQuestion.answer === selectedOption) setScore(score + 1);\r\n    if (currentIndex + 1 > questions.length - 1) {\r\n      setShowFinished(true);\r\n      return;\r\n    }\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  const resetQuiz = () => {\r\n    setCurrentIndex(0);\r\n    setShowFinished(false);\r\n    setScore(0);\r\n  };\r\n\r\n  return questions.length ? (\r\n    <div>\r\n      {showFinished ? (\r\n        <div className=\"results\">\r\n          <img\r\n            src=\"https://memegenerator.net/img/instances/84966056/your-quiz-has-ended-well-done.jpg\"\r\n            alt=\"Your Quiz has ended\"\r\n          />\r\n          <h3>\r\n            Your covid 19 quiz results are out! You scored {score} out of {questions.length}. Kudos and continue keeping  safe!!! \r\n          </h3>\r\n        </div>\r\n      ) : (\r\n        <Question\r\n          onNextClicked={onNextClicked}\r\n          question={currentQuestion}\r\n          key={currentQuestion.id}\r\n        />\r\n      )}\r\n      {showFinished ? (\r\n        <button className=\"try-again\" onClick={resetQuiz}>\r\n          Try again\r\n        </button>\r\n      ) : (\r\n        <div className=\"questions-progress\">\r\n          {currentIndex + 1}/{questions.length}\r\n        </div>\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <p>Loading</p>\r\n  );\r\n};\r\n\r\nconst GET_QUESTIONS_QUERY = gql`\r\n  query {\r\n    questionsList {\r\n      items {\r\n        question\r\n        options\r\n        answer\r\n        image {\r\n          downloadUrl\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default graphql(GET_QUESTIONS_QUERY, {\r\n  props: (result) => {\r\n    const { loading, data } = result;\r\n    let items = [];\r\n    if (data && data.questionsList) items = data.questionsList.items;\r\n    return {\r\n      loading,\r\n      questions: items,\r\n    };\r\n  },\r\n})(Questions);\r\n"]},"metadata":{},"sourceType":"module"}