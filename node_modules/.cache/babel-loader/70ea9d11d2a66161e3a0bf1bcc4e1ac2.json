{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Dev\\\\react\\\\ticgame\\\\rdgcovidquiz\\\\RDGcovidquiz\\\\src\\\\components\\\\questions\\\\index.js\";\nimport React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { graphql } from 'react-apollo';\nimport Question from '../question';\nimport './questions.css';\n\nconst Questions = ({\n  questions\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showFinished, setShowFinished] = useState(false);\n  const currentQuestion = questions[currentIndex];\n\n  const onNextClicked = selectedOption => {\n    if (currentQuestion.answer === selectedOption) setScore(score + 1);\n\n    if (currentIndex + 1 > questions.length - 1) {\n      setShowFinished(true);\n      return;\n    }\n\n    setCurrentIndex(currentIndex + 1);\n  };\n\n  const resetQuiz = () => {\n    setCurrentIndex(0);\n    setShowFinished(false);\n    setScore(0);\n  };\n\n  return questions.length ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, showFinished ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://memegenerator.net/img/instances/84966056/your-quiz-has-ended-well-done.jpg\",\n    alt: \"Your Quiz has ended\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, \"Your results are out! You scored \", score, \" out of \", questions.length, \". Kudos and continue keeping  safe!!!\")) : /*#__PURE__*/React.createElement(Question, {\n    onNextClicked: onNextClicked,\n    question: currentQuestion,\n    key: currentQuestion.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), showFinished ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"try-again\",\n    onClick: resetQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Try again\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"questions-progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, currentIndex + 1, \"/\", questions.length)) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, \"Loading\");\n};\n\nconst GET_QUESTIONS_QUERY = gql`\n  query {\n    questionsList {\n      items {\n        question\n        options\n        answer\n        image {\n          downloadUrl\n        }\n      }\n    }\n  }\n`;\nexport default graphql(GET_QUESTIONS_QUERY, {\n  props: result => {\n    const {\n      loading,\n      data\n    } = result;\n    let items = [];\n    if (data && data.questionsList) items = data.questionsList.items;\n    return {\n      loading,\n      questions: items\n    };\n  }\n})(Questions);","map":{"version":3,"sources":["C:/Users/HP/Dev/react/ticgame/rdgcovidquiz/RDGcovidquiz/src/components/questions/index.js"],"names":["React","useState","gql","graphql","Question","Questions","questions","currentIndex","setCurrentIndex","score","setScore","showFinished","setShowFinished","currentQuestion","onNextClicked","selectedOption","answer","length","resetQuiz","id","GET_QUESTIONS_QUERY","props","result","loading","data","items","questionsList"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { graphql } from 'react-apollo';\r\nimport Question from '../question';\r\n\r\nimport './questions.css';\r\n\r\nconst Questions = ({ questions }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showFinished, setShowFinished] = useState(false);\r\n\r\n  const currentQuestion = questions[currentIndex];\r\n\r\n  const onNextClicked = (selectedOption) => {\r\n    if (currentQuestion.answer === selectedOption) setScore(score + 1);\r\n    if (currentIndex + 1 > questions.length - 1) {\r\n      setShowFinished(true);\r\n      return;\r\n    }\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  const resetQuiz = () => {\r\n    setCurrentIndex(0);\r\n    setShowFinished(false);\r\n    setScore(0);\r\n  };\r\n\r\n  return questions.length ? (\r\n    <div>\r\n      {showFinished ? (\r\n        <div className=\"results\">\r\n          <img\r\n            src=\"https://memegenerator.net/img/instances/84966056/your-quiz-has-ended-well-done.jpg\"\r\n            alt=\"Your Quiz has ended\"\r\n          />\r\n          <h3>\r\n            Your results are out! You scored {score} out of {questions.length}. Kudos and continue keeping  safe!!! \r\n          </h3>\r\n        </div>\r\n      ) : (\r\n        <Question\r\n          onNextClicked={onNextClicked}\r\n          question={currentQuestion}\r\n          key={currentQuestion.id}\r\n        />\r\n      )}\r\n      {showFinished ? (\r\n        <button className=\"try-again\" onClick={resetQuiz}>\r\n          Try again\r\n        </button>\r\n      ) : (\r\n        <div className=\"questions-progress\">\r\n          {currentIndex + 1}/{questions.length}\r\n        </div>\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <p>Loading</p>\r\n  );\r\n};\r\n\r\nconst GET_QUESTIONS_QUERY = gql`\r\n  query {\r\n    questionsList {\r\n      items {\r\n        question\r\n        options\r\n        answer\r\n        image {\r\n          downloadUrl\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default graphql(GET_QUESTIONS_QUERY, {\r\n  props: (result) => {\r\n    const { loading, data } = result;\r\n    let items = [];\r\n    if (data && data.questionsList) items = data.questionsList.items;\r\n    return {\r\n      loading,\r\n      questions: items,\r\n    };\r\n  },\r\n})(Questions);\r\n"]},"metadata":{},"sourceType":"module"}