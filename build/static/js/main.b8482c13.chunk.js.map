{"version":3,"sources":["components/question-modal/cancel.svg","add.svg","components/question/index.js","components/questions/index.js","components/question-form/index.js","components/question-modal/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","question","onNextClicked","useState","answered","setAnswered","selectedOption","setSelectedOption","isCorrect","option","answer","className","src","image","downloadUrl","alt","onClick","options","map","index","key","onOptionClicked","disabled","GET_QUESTIONS_QUERY","gql","graphql","props","result","loading","data","items","questionsList","questions","currentIndex","setCurrentIndex","score","setScore","showFinished","setShowFinished","currentQuestion","length","id","QUESTION_CREATE_MUTATION","name","closeModal","questionCreate","questionForm","setQuestion","handleSubmit","e","a","preventDefault","variables","toast","handleInputChange","event","target","value","action","onSubmit","type","placeholder","onChange","maxTags","inputProps","customStyles","content","top","left","right","bottom","marginRight","transform","border","width","height","background","boxShadow","Modal","setAppElement","QuestionModal","isOpen","onRequestClose","style","contentLabel","Close","configure","client","ApolloClient","uri","App","modalOpen","setModalOpen","_","Add","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b8482c13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cancel.af976834.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.b560fb2f.svg\";","import React, { useState } from \"react\";\r\nimport \"./question.css\";\r\n\r\nconst Question = ({ question, onNextClicked }) => {\r\n  const [answered, setAnswered] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState({});\r\n\r\n  const onOptionClicked = option => {\r\n    setAnswered(true);\r\n    setSelectedOption(option);\r\n  };\r\n\r\n  const isCorrect = option => {\r\n    return option === question.answer;\r\n  };\r\n\r\n  const resetQuestion = () => {\r\n    setAnswered(false);\r\n    setSelectedOption({});\r\n    onNextClicked(selectedOption);\r\n  };\r\n\r\n  return (\r\n    <div className=\"question\">\r\n      <div className=\"question-image-holder\">\r\n        <img className=\"question-image\" src={question.image ? question.image.downloadUrl : ''} alt={question} />\r\n      </div>\r\n      <section>\r\n        <div className=\"question-text-holder\">\r\n          {answered && <button onClick={resetQuestion}>Next</button>}\r\n          <h4 className=\"question-text\">{question.question}</h4>\r\n        </div>\r\n\r\n        {question.options.map((option, index) => {\r\n          return (\r\n            <button\r\n              key={index}\r\n              onClick={() => onOptionClicked(option)}\r\n              disabled={answered && !isCorrect(option)}\r\n              className={`question-option ${answered &&\r\n                isCorrect(option) &&\r\n                \"correct\"}\r\n              ${selectedOption === option &&\r\n                !isCorrect(option) &&\r\n                \"wrong\"}\r\n              `}\r\n            >\r\n              <span>\r\n                {answered ? (isCorrect(option) ? \"âœ”\" : \"X\") : (index+1)}\r\n              </span>\r\n              {option}\r\n            </button>\r\n          );\r\n        })}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import React, { useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { graphql } from 'react-apollo';\r\nimport Question from '../question';\r\n\r\nimport './questions.css';\r\n\r\nconst Questions = ({ questions }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showFinished, setShowFinished] = useState(false);\r\n\r\n  const currentQuestion = questions[currentIndex];\r\n\r\n  const onNextClicked = (selectedOption) => {\r\n    if (currentQuestion.answer === selectedOption) setScore(score + 1);\r\n    if (currentIndex + 1 > questions.length - 1) {\r\n      setShowFinished(true);\r\n      return;\r\n    }\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  const resetQuiz = () => {\r\n    setCurrentIndex(0);\r\n    setShowFinished(false);\r\n    setScore(0);\r\n  };\r\n\r\n  return questions.length ? (\r\n    <div>\r\n      {showFinished ? (\r\n        <div className=\"results\">\r\n          <img\r\n            src=\"https://memegenerator.net/img/instances/84966056/your-quiz-has-ended-well-done.jpg\"\r\n            alt=\"Your Quiz has ended\"\r\n          />\r\n          <h3>\r\n            Your results are out! You scored {score} out of {questions.length}. Kudos and continue keeping  safe!!! \r\n          </h3>\r\n        </div>\r\n      ) : (\r\n        <Question\r\n          onNextClicked={onNextClicked}\r\n          question={currentQuestion}\r\n          key={currentQuestion.id}\r\n        />\r\n      )}\r\n      {showFinished ? (\r\n        <button className=\"try-again\" onClick={resetQuiz}>\r\n          Try again\r\n        </button>\r\n      ) : (\r\n        <div className=\"questions-progress\">\r\n          {currentIndex + 1}/{questions.length}\r\n        </div>\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <p>Loading</p>\r\n  );\r\n};\r\n\r\nconst GET_QUESTIONS_QUERY = gql`\r\n  query {\r\n    questionsList {\r\n      items {\r\n        question\r\n        options\r\n        answer\r\n        image {\r\n          downloadUrl\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default graphql(GET_QUESTIONS_QUERY, {\r\n  props: (result) => {\r\n    const { loading, data } = result;\r\n    let items = [];\r\n    if (data && data.questionsList) items = data.questionsList.items;\r\n    return {\r\n      loading,\r\n      questions: items,\r\n    };\r\n  },\r\n})(Questions);\r\n","import React, { useState } from 'react';\r\nimport TagsInput from 'react-tagsinput';\r\nimport gql from 'graphql-tag';\r\nimport { graphql } from 'react-apollo';\r\n//import { FileInput } from '@8base-react/file-input';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport 'react-tagsinput/react-tagsinput.css';\r\nimport './form.css';\r\n\r\nconst QUESTION_CREATE_MUTATION = gql`\r\n  mutation QuestionCreate($data: QuestionCreateInput!) {\r\n    questionCreate(data: $data) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst QuestionForm = ({ closeModal, questionCreate }) => {\r\n  const [questionForm, setQuestion] = useState({\r\n    options: [],\r\n    question: '',\r\n    image: {},\r\n    answer: '',\r\n  });\r\n  const inputProps = {\r\n    placeholder: 'Add an option and press enter',\r\n    className: 'question-input',\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await questionCreate({ variables: { data: questionForm } });\r\n    closeModal();\r\n    toast('Your question has been created successfully');\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    event.preventDefault();\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    setQuestion({\r\n      ...questionForm,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleTagsChange = (options) => {\r\n    setQuestion({\r\n      ...questionForm,\r\n      options,\r\n    });\r\n  };\r\n\r\n  \r\n\r\n    return (\r\n    <form action=\"\" id=\"question-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"question\"\r\n        placeholder=\"Enter your covid 19 npm related question....\"\r\n        onChange={handleInputChange}\r\n        value={questionForm.question}\r\n        className=\"question-input\"\r\n      />\r\n      <TagsInput\r\n        value={questionForm.options}\r\n        onChange={handleTagsChange}\r\n        maxTags={4}\r\n        inputProps={inputProps}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Add the answer to the question...\"\r\n        value={questionForm.answer}\r\n        onChange={handleInputChange}\r\n        className=\"question-input\"\r\n        name=\"answer\"\r\n      />\r\n    \r\n\r\n      <div className=\"submit-area\">\r\n        <button className=\"submit-button\" type=\"submit\">\r\n          Create Question\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default graphql(QUESTION_CREATE_MUTATION, {\r\n  name: 'questionCreate',\r\n})(QuestionForm);\r\n","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport QuestionForm from \"../question-form\";\r\n\r\nimport \"./modal.css\";\r\nimport Close from \"./cancel.svg\";\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"40%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    border: \"none\",\r\n    width: \"450px\",\r\n    height: \"400px\",\r\n    background: \"#f7f8f9\",\r\n    boxShadow: \"0 25px 50px -12px rgba(0, 0, 0, 0.25)\"\r\n  }\r\n};\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst QuestionModal = ({ isOpen, closeModal }) => {\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onRequestClose={closeModal}\r\n      style={customStyles}\r\n      contentLabel=\"Question Modal\"\r\n    >\r\n      <div className=\"modal-header\">\r\n        <p />\r\n        <p>Add a question</p>\r\n        <span onClick={closeModal} className=\"close\">\r\n          <img src={Close} alt=\"Press button to close modal\" />\r\n        </span>\r\n      </div>\r\n      <QuestionForm closeModal={closeModal} />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default QuestionModal;\r\n","import React, { useState } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport { toast } from 'react-toastify';\n\nimport Questions from \"./components/questions\";\nimport QuestionModal from \"./components/question-modal\";\n\nimport Add from './add.svg';\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"./App.css\";\n\ntoast.configure();\nconst client = new ApolloClient({\n  uri: \"https://api.8base.com/ckeymmc3s000507kwaxug8k5d\"\n});\n\nfunction App() {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <header>\n          <div>COVID 19 Quiz </div>\n        </header>\n        <Questions />\n        <button className=\"add-question\" onClick={_ => setModalOpen(true)}>\n          <img src={Add} alt=\"Click to create a new question\"/>\n        </button>\n        <QuestionModal\n          isOpen={modalOpen}\n          closeModal={closeModal}\n        />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}